{ "grammar": "expression = additive\n\nadditive\n  = first:multiplicative rest:(('+' / '-') multiplicative)+ {\n    return rest.reduce(function(memo, curr) {\n        return {operator: curr[0], left: memo, right: curr[1]};\n    }, first);\n  }\n  / multiplicative\n\nmultiplicative\n  = first:exponent rest:(('*' / '%' / '/' / !'-') exponent)+ {\n    return rest.reduce(function(memo, curr) {\n        return {operator: curr[0] || '*', left: memo, right: curr[1]};\n    }, first);\n  }\n  / exponent\n\nexponent\n  = first:function rest:(('^') function)+ {\n    return rest.reduce(function(memo, curr) {\n        return {operator: curr[0], left: memo, right: curr[1]};\n    }, first);\n  }\n  / function\n\nfunction\n  = '(' additive:additive ')' { return additive; }\n  / 'sin(' additive:additive ')' { return { left: additive, right: null, operator: 'sin'}; }\n  / 'cos(' additive:additive ')' { return { left: additive, right: null, operator: 'cos'}; }\n  / 'tan(' additive:additive ')' { return { left: additive, right: null, operator: 'tan'}; }\n  / primary\n\nprimary\n  = number\n  / '(' additive:additive ')' { return additive; }\n\nnumber\n  = negative:'-'? digits:[0-9A-Z]* point:'.' decimals:[0-9A-Z]+ { return (negative || '') + (digits.length ? digits.join('') : '0') + point + decimals.join(''); }\n  / negative:'-'? digits:[0-9A-Z]+ { return (negative || '') + digits.join(''); }\n  / negative:'-'? symbol:[eπ∞] { return (negative || '') + symbol }" }